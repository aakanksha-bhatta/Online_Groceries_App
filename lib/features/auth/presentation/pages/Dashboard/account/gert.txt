import 'dart:convert';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'package:online_groceries_app/config/route/path.dart';
import 'package:online_groceries_app/core/services/auth_service.dart';
import 'package:online_groceries_app/features/auth/presentation/provider/state_provider.dart';
import 'package:online_groceries_app/features/auth/presentation/widget/custom_button_widget.dart';

class Details extends ConsumerStatefulWidget {
  const Details({super.key});

  @override
  ConsumerState<Details> createState() => _DetailsState();
}

class _DetailsState extends ConsumerState<Details> {
  final AuthService authService = AuthService();
  final _formKey = GlobalKey<FormState>();

  late TextEditingController usernameController;
  late TextEditingController emailController;

  bool _isUpdateEnabled = false;

  String? _initialUsername;
  String? _initialEmail;
  String? _initialPhotoBase64;
  bool _isImageChanged = false;

  // Bottom sheet for pick image
  void _showImageSourceActionSheet(WidgetRef ref, BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (BuildContext context) {
        return SafeArea(
          child: Wrap(
            children: [
              ListTile(
                leading: const Icon(Icons.camera_alt),
                title: const Text('Camera'),
                onTap: () {
                  Navigator.pop(context);
                  _pickAndUploadImage(ref, context, ImageSource.camera);
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('Gallery'),
                onTap: () {
                  Navigator.pop(context);
                  _pickAndUploadImage(ref, context, ImageSource.gallery);
                },
              ),
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Remove Photo'),
                onTap: () {
                  Navigator.pop(context);
                  _removeProfilePhoto(ref);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  Future<void> _pickAndUploadImage(
    WidgetRef ref,
    BuildContext context,
    ImageSource source,
  ) async {
    final imgPicker = ImagePicker();
    final pickedFile = await imgPicker.pickImage(source: source);

    if (pickedFile == null) return;

    final file = File(pickedFile.path);
    final bytes = await file.readAsBytes();
    final base64Image = base64Encode(bytes);

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    await FirebaseFirestore.instance.collection('users').doc(user.uid).update({
      'photoBase64': base64Image,
    });

    _isImageChanged = true;
    _checkIfUpdated();

    ref.invalidate(userDataProvider);
  }

  /// Remove profile photo
  Future<void> _removeProfilePhoto(WidgetRef ref) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    await FirebaseFirestore.instance.collection('users').doc(user.uid).update({
      'photoBase64': '',
    });

    _isImageChanged = true;
    _checkIfUpdated();

    ref.invalidate(userDataProvider);
  }

  Future<void> _saveUserDetails() async {
    if (!_formKey.currentState!.validate()) return;

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .update({
            'username': usernameController.text.trim(),
            'useremail': emailController.text.trim(),
          });

      _initialUsername = usernameController.text.trim();
      _isImageChanged = false;
      _checkIfUpdated();

      ref.invalidate(userDataProvider);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Profile updated successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error updating profile: $e')));
    }
  }

  void _checkIfUpdated() {
    final currentUsername = usernameController.text.trim();

    final hasUsernameChanged = currentUsername != _initialUsername;
    final hasImageChanged = _isImageChanged;

    final shouldEnable = hasUsernameChanged || hasImageChanged;

    if (_isUpdateEnabled != shouldEnable) {
      setState(() {
        _isUpdateEnabled = shouldEnable;
      });
    }
  }

  @override
  void dispose() {
    usernameController.dispose();
    emailController.dispose();
    super.dispose();
  }

  // @override
  // void initState() {
  //   super.initState();
  //   usernameController.addListener(_checkIfUpdated);
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Colors.black),
          onPressed: () => context.go(Path.account),
        ),
      ),
      body: FutureBuilder<Map<String, dynamic>?>(
        future: authService.fetchUserData(),
        builder: (context, snapshot) {
          if (!snapshot.hasData || snapshot.hasError) {
            return const Center(child: Text('Failed to load user data'));
          }

          final userData = snapshot.data!;
          _initialUsername ??= userData['username'] as String? ?? '';
          _initialEmail ??= userData['useremail'] as String? ?? '';
          _initialPhotoBase64 ??= userData['photoBase64'] as String? ?? '';

          usernameController = TextEditingController(text: _initialUsername!);
          emailController = TextEditingController(text: _initialEmail!);
          usernameController.addListener(_checkIfUpdated);

          final userDataAsync = ref.watch(userDataProvider);

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                children: [
                  const SizedBox(height: 20),
                  Center(
                    child: Column(
                      children: [
                        Stack(
                          children: [
                            Container(
                              height: 120.32.h,
                              width: 120.44.w,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(27.r),
                              ),
                              child: userDataAsync.when(
                                data: (userData) {
                                  final photoBase64 =
                                      userData['photoBase64'] as String?;
                                  if (photoBase64 != null &&
                                      photoBase64.isNotEmpty) {
                                    try {
                                      final bytes = base64Decode(photoBase64);
                                      return CircleAvatar(
                                        backgroundImage: MemoryImage(bytes),
                                        radius: 60,
                                      );
                                    } catch (_) {
                                      return Image.asset(
                                        'assets/images/signin_bg.png',
                                      );
                                    }
                                  } else {
                                    return Image.asset(
                                      'assets/images/signin_bg.png',
                                    );
                                  }
                                },
                                loading: () => const SizedBox(),
                                error: (e, _) =>
                                    Image.asset('assets/images/signin_bg.png'),
                              ),
                            ),
                            Positioned(
                              bottom: 0,
                              right: 0,
                              child: InkWell(
                                onTap: () =>
                                    _showImageSourceActionSheet(ref, context),
                                child: Container(
                                  height: 33,
                                  width: 33,
                                  decoration: BoxDecoration(
                                    color: const Color(0xFF53B175),
                                    borderRadius: BorderRadius.circular(30),
                                  ),
                                  child: Padding(
                                    padding: const EdgeInsets.all(8.0),
                                    child: SvgPicture.asset(
                                      'assets/icons/pen.svg',
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 50),
                        TextFormField(
                          controller: usernameController,
                          decoration: const InputDecoration(
                            labelText: 'Name',
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) => value == null || value.isEmpty
                              ? 'Please enter your name'
                              : null,
                        ),
                        const SizedBox(height: 36),
                        TextFormField(
                          readOnly: true,
                          controller: emailController,
                          decoration: const InputDecoration(
                            labelText: 'Email',
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) => value == null || value.isEmpty
                              ? 'Please enter your email'
                              : null,
                        ),
                        const SizedBox(height: 50),
                        CustomButtonWidget(
                          buttonName: 'Update',
                          isEnabled: _isUpdateEnabled,
                          onPressed: _isUpdateEnabled ? _saveUserDetails : null,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
